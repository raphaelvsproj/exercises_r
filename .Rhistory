quiqua2
# Podemos também apresentar o resultado sem que esteja em notação científica
options(scipen = 999)
quiqua2
tab1 <- datatable(dados, options = list(pageLength = 10))
dados <- read.csv2('Banco de Dados 9.2.csv', stringsAsFactors = T,
fileEncoding = "latin1")
View(dados)
dados <- read.csv2('Banco de Dados 9.1.csv',
fileEncoding = "latin1")
glimpse(dados)
View(dados)
View(dados)
dados$Tipo_Ervilha <- factor(dados$Tipo_Ervilha,
levels = c("Amarela Lisa",
"Amarela Rugosa",
"Verde Lisa",
"Verde Rugosa"))
tabela <- table(dados$Tipo_Ervilha)
kable(head(tabela)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
dados$Tipo_Ervilha <- factor(dados$Tipo_Ervilha,
levels = c("Amarela Lisa",
"Amarela Rugosa",
"Verde Lisa",
"Verde Rugosa"))
tabela <- table(dados$Tipo_Ervilha)
tabela_df <- as.data.frame(tabela)
matriz_final <- matrix(unlist(tabela_df), nrow = 2, byrow = TRUE)
colnames(matriz_final) <- rownames(tabela_df)
kable(head(tabela)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
View(matriz_final)
dados$Tipo_Ervilha <- factor(dados$Tipo_Ervilha,
levels = c("Amarela Lisa",
"Amarela Rugosa",
"Verde Lisa",
"Verde Rugosa"))
matriz_final <- xtabs(~ Tipo_Ervilha, data = dados)
matriz_df <- as.data.frame(matriz_final)
matriz_transposta <- t(matriz_df)
kable(head(matriz_final)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
dados <- read.csv2('Banco de Dados 9.1.csv',
fileEncoding = "latin1")
glimpse(dados)
dados$Tipo_Ervilha <- factor(dados$Tipo_Ervilha,
levels = c("Amarela Lisa",
"Amarela Rugosa",
"Verde Lisa",
"Verde Rugosa"))
matriz_final <- xtabs(~ Tipo_Ervilha, data = dados)
matriz_df <- as.data.frame(matriz_final)
matriz_transposta <- t(matriz_df)
kable(head(matriz_final)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
View(matriz_df)
dados$Tipo_Ervilha <- factor(dados$Tipo_Ervilha,
levels = c("Amarela Lisa",
"Amarela Rugosa",
"Verde Lisa",
"Verde Rugosa"))
matriz_final <- xtabs(~ Tipo_Ervilha, data = dados)
matriz_df <- as.data.frame(matriz_final)
colnames(matriz_final) <- c("Tipo de Ervilha", "Probabilidade")
View(matriz_transposta)
View(matriz_df)
dados$Tipo_Ervilha <- factor(dados$Tipo_Ervilha,
levels = c("Amarela Lisa",
"Amarela Rugosa",
"Verde Lisa",
"Verde Rugosa"))
matriz_final <- xtabs(~ Tipo_Ervilha, data = dados)
matriz_df <- as.data.frame(matriz_final)
colnames(matriz_df) <- c("Tipo de Ervilha", "Probabilidade")
matriz_transposta <- t(matriz_df)
kable(head(matriz_transposta)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
View(matriz_df)
## Criação da tabela de frequência
tabela <- table(dados$Tipo_Ervilha)
tabela
## Realização do modelo
quiqua <- chisq.test(tabela, p = c(0.5625, 0.1875, 0.1875, 0.0625))
quiqua
tabela <- table(dados$Tipo_Ervilha)
dados$Tipo_Ervilha <- factor(dados$Tipo_Ervilha,
levels = c("Amarela Lisa",
"Amarela Rugosa",
"Verde Lisa",
"Verde Rugosa"))
matriz_final <- xtabs(~ Tipo_Ervilha, data = dados)
matriz_df <- as.data.frame(matriz_final)
colnames(matriz_df) <- c("Tipo de Ervilha", "Probabilidade")
kable(head(matriz_df)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
View(matriz_df)
tabela
## Incluindo os dados
dados <- read.csv2('Banco de Dados 9.1.csv',
fileEncoding = "latin1")
glimpse(dados)
## Criação da tabela de frequência
tabela <- table(dados$Tipo_Ervilha)
## Exibição da tabela de frequência
dados$Tipo_Ervilha <- factor(dados$Tipo_Ervilha,
levels = c("Amarela Lisa",
"Amarela Rugosa",
"Verde Lisa",
"Verde Rugosa"))
matriz_final <- xtabs(~ Tipo_Ervilha, data = dados)
matriz_df <- as.data.frame(matriz_final)
colnames(matriz_df) <- c("Tipo de Ervilha", "Probabilidade")
kable(head(matriz_df)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
## Realização do modelo
quiquaH <- chisq.test(tabela)
quiquaH
## Calculando o novo alfa
novoalfa <- 0.05/(length(tabela))
novoalfa
## Novos limites para os resíduos padronizados ajustados
qnorm(novoalfa/2)
cramer_v(tabela, p = c(0.5625, 0.1875, 0.1875, 0.0625))
round(2*(1-pnorm(abs(quiqua$stdres))), 6)
if(!require(pacman)) install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, ggplot2, car, rstatix, lmtest, ggpubr, psych, data.table, DT, knitr, kableExtra, corrplot)
library(dplyr)
library(ggplot2)
library(ggplot2)
if(!require(pacman)) install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, rlang, ggplot2, car, rstatix, lmtest, ggpubr, psych, data.table, DT, knitr, kableExtra, corrplot)
library(dplyr)
library(rlang)
library(ggplot2)
install.packages("rlang")
install.packages("ggplot2")
library(dplyr)
library(rlang)
library(ggplot2)
if(!require(pacman)) install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, rlang, ggplot2, car, rstatix, lmtest, ggpubr, psych, data.table, DT, knitr, kableExtra, corrplot)
library(dplyr)
library(rlang)
library(ggplot2)
library(car)
library(rstatix)
library(lmtest)
library(ggpubr)
library(psych)
library(data.table)
library(DT)
library(knitr)
library(kableExtra)
library(corrplot)
library(dplyr)
library(rlang)
library(car)
library(rstatix)
library(lmtest)
library(psych)
library(data.table)
library(DT)
library(knitr)
library(kableExtra)
library(corrplot)
dados <- read.csv2('Banco de Dados 11.csv',
fileEncoding = "latin1")
glimpse(dados)
## Incluindo os dados
dados <- read.csv2('Banco de Dados 11.csv',
fileEncoding = "latin1")
glimpse(dados)
tabela <- datatable(dados, options = list(pageLength = 10))
tabela
View(tabela)
# Relação linear entre VD e VI:
plot(dados$Publicidade, dados$Vendas)
# Construção do modelo
mod <- lm(Vendas ~ Publicidade, dados)
# Análise gráfica
par(mfrow = c(2,2))
plot(mod)
par(mfrow = c(1,1))
ggplot(data = dados, mapping = aes(x = Publicidade, y = Vendas)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label..,
sep = "*plain(\".\")~~")),
label.x = 600, label.y = 50) +
theme_classic()
install.packages("ggplot")
ggplot(data = dados, mapping = aes(x = Publicidade, y = Vendas)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label..,
sep = "*plain(\".\")~~")),
label.x = 600, label.y = 50) +
theme_classic()
if(!require(pacman)) install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, rlang, ggplot2, car, rstatix, lmtest, ggpubr, psych, data.table, DT, knitr, kableExtra, corrplot)
search()
detach(package:ggplot2, unload = TRUE)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
## Incluindo os dados
dados <- read.csv2('Banco de Dados 11.csv',
fileEncoding = "latin1")
glimpse(dados)
# Construção do modelo
mod <- lm(Vendas ~ Publicidade, dados)
# Análise gráfica
par(mfrow = c(2,2)) # inserindo um quadro juntando os quatro gráficos que serão gerados
plot(mod)
par(mfrow = c(1,1)) # retomando a apresentação dos gráficos em unidade
# Normalidade dos resíduos
shapiro.test(mod$residuals)
# Outliers nos resíduos
summary(rstandard(mod))
# Independência dos resíduos (Durbin-Watson)
durbinWatsonTest(mod)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(car)) install.packages("car")
library(car)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(lmtest)) install.packages("lmtest")
library(lmtest)
if(!require(ggpmisc)) install.packages("ggpmisc")
library(ggpmisc)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(car)) install.packages("car")
library(car)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(lmtest)) install.packages("lmtest")
library(lmtest)
if(!require(rlang)) install.packages("rlang")
library(rlang)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
if(!require(ggpmisc)) install.packages("ggpmisc")
library(ggpmisc)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(car)) install.packages("car")
library(car)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(lmtest)) install.packages("lmtest")
library(lmtest)
if(!require(rlang)) install.packages("rlang")
library(rlang)
if(!require(ggplot2)) install.packages("ggplot2", type = "binary")
library(ggplot2)
install.packages("ggplot2", type = "binary")
if(!require(ggpmisc)) install.packages("ggpmisc")
library(ggpmisc)
if(!require(rlang)) install.packages("rlang")
library(rlang)
if(!require(ggplot2)) install.packages("ggplot2", type = "binary")
library(ggplot2)
install.packages("ggplot2", type = "binary")
Sys.setenv(TMPDIR = "C:/R-Temp") # Esse diretório temporário foi retificado por ser mais curto
library(pacman)
# Definir os pacotes a serem utilizados
pacman::p_load(dplyr, ggplot2, car, knitr, xtable, tidyr, rstatix, lmtest, ggpubr, data.table, car, GGally, margins, plm, censReg, stargazer, rstatix, lmtest, highcharter, plotly, writexl, QuantPsyc, psych, scatterplot3d, MVN, emmeans, kableExtra, fastDummies, ivreg, easystats)
# Carregar os pacotes necessários
library(dplyr)
library(ggplot2)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(car)) install.packages("car")
library(car)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(lmtest)) install.packages("lmtest")
library(lmtest)
if(!require(rlang)) install.packages("rlang")
library(rlang)
if(!require(ggplot2)) install.packages("ggplot2", type = "binary")
library(ggplot2)
install.packages("ggplot2", type = "binary")
if(!require(ggpmisc)) install.packages("ggpmisc")
library(ggpmisc)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(car)) install.packages("car")
library(car)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(lmtest)) install.packages("lmtest")
library(lmtest)
if(!require(rlang)) install.packages("rlang")
library(rlang)
if(!require(ggplot2)) install.packages("ggplot2", type = "binary")
library(ggplot2)
install.packages("ggplot2", type = "binary")
library(ggplot2)
if(!require(ggpmisc)) install.packages("ggpmisc")
remove.packages("ggplot2")
install.packages(c("ggplot2", "ggpmisc"))
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(car)) install.packages("car")
library(car)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(lmtest)) install.packages("lmtest")
library(lmtest)
if(!require(rlang)) install.packages("rlang")
library(rlang)
if(!require(ggplot2)) install.packages("ggplot2", type = "binary")
library(ggplot2)
if(!require(ggpmisc)) install.packages("ggpmisc")
library(ggpmisc)
if(!require(data.table)) install.packages("data.table")
library(data.table)
## Incluindo os dados
dados <- read.csv2('Banco de Dados 12.csv',
fileEncoding = "latin1")
glimpse(dados)
kable(head(dados)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(car)) install.packages("car")
library(car)
if(!require(data.table)) install.packages("data.table")
library(data.table)
if(!require(knitr)) install.packages("knitr")
library(knitr)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(lmtest)) install.packages("lmtest")
library(lmtest)
if(!require(rlang)) install.packages("rlang")
library(rlang)
if(!require(ggplot2)) install.packages("ggplot2", type = "binary")
library(ggplot2)
if(!require(ggpmisc)) install.packages("ggpmisc")
library(ggpmisc)
## Incluindo os dados
dados <- read.csv2('Banco de Dados 12.csv',
fileEncoding = "latin1")
glimpse(dados)
kable(head(dados)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
if(!require(ggpubr)) install.packages("ggpubr")
library(ggpubr)
if(!require(QuantPsyc)) install.packages("QuantPsyc")
library(QuantPsyc)
if(!require(psych)) install.packages("psych")
library(psych)
if(!require(scatterplot3d)) install.packages("scatterplot3d")
library(scatterplot3d)
## Construção do modelo:
mod <- lm(Notas ~ Tempo_Rev + Tempo_Sono, dados)
## Análise gráfica:
par(mfrow=c(2,2)) # inserindo um quadro juntando os quatro gráficos que serão gerados
plot(mod)
par(mfrow=c(1,1)) # retomando a apresentação dos gráficos em unidade
# Normalidade dos resíduos
shapiro.test(mod$residuals)
# Outliers nos resíduos
summary(rstandard(mod))
# Independência dos resíduos (Durbin-Watson)
durbinWatsonTest(mod)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(car)) install.packages("car")
library(car)
if(!require(data.table)) install.packages("data.table")
library(data.table)
if(!require(knitr)) install.packages("knitr")
library(knitr)
if(!require(kableExtra)) install.packages("kableExtra")
library(kableExtra)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(lmtest)) install.packages("lmtest")
library(lmtest)
if(!require(rlang)) install.packages("rlang")
library(rlang)
if(!require(ggplot2)) install.packages("ggplot2", type = "binary")
library(ggplot2)
if(!require(ggpmisc)) install.packages("ggpmisc")
library(ggpmisc)
if(!require(ggpubr)) install.packages("ggpubr")
library(ggpubr)
if(!require(QuantPsyc)) install.packages("QuantPsyc")
library(QuantPsyc)
if(!require(psych)) install.packages("psych")
library(psych)
if(!require(scatterplot3d)) install.packages("scatterplot3d")
library(scatterplot3d)
## Construção do modelo:
mod <- lm(Notas ~ Tempo_Rev + Tempo_Sono, dados)
## Análise gráfica:
par(mfrow=c(2,2)) # inserindo um quadro juntando os quatro gráficos que serão gerados
plot(mod)
par(mfrow=c(1,1)) # retomando a apresentação dos gráficos em unidade
# Normalidade dos resíduos
shapiro.test(mod$residuals)
# Outliers nos resíduos
summary(rstandard(mod)) # analisando o resíduo dentro da função summary
# Independência dos resíduos (Durbin-Watson)
durbinWatsonTest(mod)
# Homogeneidade (Breusch-Pagan)
bptest(mod)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(car)) install.packages("car")
library(car)
if(!require(data.table)) install.packages("data.table")
library(data.table)
if(!require(knitr)) install.packages("knitr")
library(knitr)
if(!require(kableExtra)) install.packages("kableExtra")
library(kableExtra)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(lmtest)) install.packages("lmtest")
library(lmtest)
if(!require(rlang)) install.packages("rlang")
library(rlang)
if(!require(ggplot2)) install.packages("ggplot2", type = "binary")
library(ggplot2)
if(!require(ggpmisc)) install.packages("ggpmisc")
library(ggpmisc)
if(!require(ggpubr)) install.packages("ggpubr")
library(ggpubr)
if(!require(QuantPsyc)) install.packages("QuantPsyc")
library(QuantPsyc)
if(!require(psych)) install.packages("psych")
library(psych)
if(!require(scatterplot3d)) install.packages("scatterplot3d")
library(scatterplot3d)
## Incluindo os dados
dados <- read.csv2('Banco de Dados 12.csv',
fileEncoding = "latin1")
glimpse(dados)
kable(head(dados)) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
## Construção do modelo:
mod <- lm(Notas ~ Tempo_Rev + Tempo_Sono, dados)
## Análise gráfica:
par(mfrow=c(2,2)) # inserindo um quadro juntando os quatro gráficos que serão gerados
plot(mod)
par(mfrow=c(1,1)) # retomando a apresentação dos gráficos em unidade
# Normalidade dos resíduos
shapiro.test(mod$residuals)
# Outliers nos resíduos
summary(rstandard(mod)) # analisando o resíduo dentro da função summary
# Independência dos resíduos (Durbin-Watson)
durbinWatsonTest(mod)
# Homogeneidade (Breusch-Pagan)
bptest(mod)
pairs.painels(dados) # Multicolinearidade: r > 0.9
pairs.painels(dados) # Multicolinearidade: r > 0.9
pairs.panels(dados) # Multicolinearidade: r > 0.9
vif(mod) # Multicolinearidade VIF > 10
vif(mod) # Multicolinearidade VIF > 10
mod2 <- lm(Notas ~ Tempo_Rev, dados)
## Análise do modelo
summary(mod)
summary(mod2)
## Obtenção dos coeficientes padronizados
lm.beta(mod)
lm.beta(mod2)
## Obtenção do IC 95% para os coeficientes
confint(mod)
confint(mod2)
## Obtenção dos coeficientes padronizados
lm.beta(mod)
lm.beta(mod2)
## Obtenção do IC 95% para os coeficientes
confint(mod)
confint(mod2)
## Análise do modelo
summary(mod) # O modelo não está padronizado com a função rstandard(), então o intervalo dos resíduos (entre 3 e -3) não será significativo
summary(mod2) # O modelo não está padronizado com a função rstandard(), então o intervalo dos resíduos (entre 3 e -3) não será significativo
## Obtenção dos coeficientes padronizados
lm.beta(mod)
lm.beta(mod2)
## Obtenção do IC 95% para os coeficientes
confint(mod)
confint(mod2)
AIC(mod, mod2)
anova(mod, mod2)
graph <- scatterplot3d(dados$Notas ~ dados$Tempo_Rev + dados$Tempo_Sono,
pch = 16, angle = 30, color = "steelblue", box = FALSE,
xlab="Tempo de revis?o", ylab="Tempo de sono", zlab="Notas")
graph$plane3d(mod, col="black", draw_polygon = TRUE)
